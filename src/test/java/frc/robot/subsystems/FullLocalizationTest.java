package frc.robot.subsystems;

import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import frc.robot.subsystems.drivetrain.FullLocalization;
import org.junit.Before;
import org.junit.Test;

import static java.lang.Math.*;
import static org.junit.Assert.*;

public class FullLocalizationTest {

    FullLocalization localization;
    DifferentialDriveOdometry wpi_localization;
    double m_width = 1;
    @Before
    public void setUp() throws Exception {
        Rotation2d angle = new Rotation2d(0);
        localization = new FullLocalization(angle,m_width);
        wpi_localization = new DifferentialDriveOdometry(angle);
    }

    @Test
    public void updateNominal() {
        Rotation2d angle = new Rotation2d(0);

        double left ;
        double right;


        double dt = 2e-2; // 20 msec timestep
        double time = dt;
        double[] acc =   {0.1,0.2,0.3,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,0.8,0.8,0.8,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   , 0  ,0   ,0  }; // m/s^2
        double[] omega = {0  ,0  ,0  ,0  ,  0,0  ,0,0,0,0,0,0,0,0,0,0  ,0  , 0 , 0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.02,0.02}; // rad/s

        double[] v = new double[acc.length];
        double[] phi = new double[acc.length];
        double[] x = new double[acc.length];
        double[] y = new double[acc.length];
        double[] left_track = new double[acc.length];
        double[] right_track = new double[acc.length];
        double[] right_track_pos_x = new double[acc.length];
        double[] right_track_pos_y = new double[acc.length];
        double[] left_track_pos_x = new double[acc.length];
        double[] left_track_pos_y = new double[acc.length];

        v[0] = 0;
        phi[0] = 0;
        x[0] = 0;
        y[0] = 0;
        right_track_pos_x[0] = x[0] + m_width/2*sin(-phi[0]);
        right_track_pos_y[0] = y[0] - m_width/2*cos(-phi[0]);
        left_track_pos_x[0] = x[0] - m_width/2*sin(-phi[0]);
        left_track_pos_y[0] = y[0] + m_width/2*cos(-phi[0]);
        right_track[0]=0;
        left_track[0]=0;


        for (int i=1; i < acc.length; i ++ )
        {
            omega[i] = omega[i]+0.1; // Create constant angular rate
            v[i]=v[i-1]+dt*acc[i-1];
            phi[i]=phi[i-1]+dt*omega[i-1];
            x[i] = x[i-1] + dt*(v[i] + v[i-1])/2*cos((phi[i]+phi[i-1])/2);
            y[i] = y[i-1] + dt*(v[i] + v[i-1])/2*sin((phi[i]+phi[i-1])/2);


            right_track_pos_x[i] = x[i] + m_width/2*sin(-phi[i]);
            right_track_pos_y[i] = y[i] - m_width/2*cos(-phi[i]);
            left_track_pos_x[i] = x[i] - m_width/2*sin(-phi[i]);
            left_track_pos_y[i] = y[i] + m_width/2*cos(-phi[i]);

            left_track[i] =left_track[i-1] +  sqrt( pow(left_track_pos_x[i]-left_track_pos_x[i-1],2) + pow(left_track_pos_y[i]-left_track_pos_y[i-1],2)   );
            right_track[i] = right_track[i-1]  + sqrt( pow(right_track_pos_x[i]-right_track_pos_x[i-1],2) + pow(right_track_pos_y[i]-right_track_pos_y[i-1],2)   );
        }



        Pose2d ref_pose;
        Pose2d ekf_pose;

        for (int i =1; i<acc.length ; i ++) {
            angle = Rotation2d.fromDegrees( toDegrees( phi[i]));
            left = left_track[i];
            right = right_track[i];

            ref_pose = wpi_localization.update(angle, left, right);
            ekf_pose = localization.update(angle, left, right, acc[i] + 2*(random()-0.5),time);


            if ( i> 8) { // ignore first cycles, before KF is stabilized
                assertEquals(ref_pose.getTranslation().getX(), ekf_pose.getTranslation().getX(), 1e-2);
                assertEquals(ref_pose.getTranslation().getY(), ekf_pose.getTranslation().getY(), 1e-2);
                assertEquals(ref_pose.getRotation().getDegrees(), ekf_pose.getRotation().getDegrees(), 1);
                assertEquals(v[i], localization.filter.model.state_estimate.data[2][0], 0.07);
                assertEquals(omega[i], localization.filter.model.state_estimate.data[4][0], 0.07);
                assertEquals(phi[i],ekf_pose.getRotation().getRadians(), 0.05);
            }
            time += dt;
        }
        }

    @Test
    public void initial_pose() {
        Rotation2d angle ;
        double gyro_offset = 0.3;

        double left ;
        double right;


        double dt = 2e-2; // 20 msec timestep
        double time = dt;
        double[] acc =   {0.1,0.2,0.3,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,0.8,0.8,0.8,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   , 0  ,0   ,0  }; // m/s^2
        double[] omega = {0  ,0  ,0  ,0  ,  0,0  ,0,0,0,0,0,0,0,0,0,0  ,0  , 0 , 0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.02,0.02}; // rad/s

        double[] v = new double[acc.length];
        double[] phi = new double[acc.length];
        double[] x = new double[acc.length];
        double[] y = new double[acc.length];
        double[] left_track = new double[acc.length];
        double[] right_track = new double[acc.length];
        double[] right_track_pos_x = new double[acc.length];
        double[] right_track_pos_y = new double[acc.length];
        double[] left_track_pos_x = new double[acc.length];
        double[] left_track_pos_y = new double[acc.length];

        v[0] = 0;
        phi[0] = toRadians(720);
        x[0] = 10;
        y[0] = 5;
        right_track_pos_x[0] = x[0] + m_width/2*sin(-phi[0]);
        right_track_pos_y[0] = y[0] - m_width/2*cos(-phi[0]);
        left_track_pos_x[0] = x[0] - m_width/2*sin(-phi[0]);
        left_track_pos_y[0] = y[0] + m_width/2*cos(-phi[0]);
        right_track[0]=0;
        left_track[0]=0;


        for (int i=1; i < acc.length; i ++ )
        {
            omega[i] = omega[i]+0.1; // Create constant angular rate
            v[i]=v[i-1]+dt*acc[i-1];
            phi[i]=phi[i-1]+dt*omega[i-1];
            x[i] = x[i-1] + dt*(v[i] + v[i-1])/2*cos((phi[i]+phi[i-1])/2);
            y[i] = y[i-1] + dt*(v[i] + v[i-1])/2*sin((phi[i]+phi[i-1])/2);


            right_track_pos_x[i] = x[i] + m_width/2*sin(-phi[i]);
            right_track_pos_y[i] = y[i] - m_width/2*cos(-phi[i]);
            left_track_pos_x[i] = x[i] - m_width/2*sin(-phi[i]);
            left_track_pos_y[i] = y[i] + m_width/2*cos(-phi[i]);

            left_track[i] =left_track[i-1] +  sqrt( pow(left_track_pos_x[i]-left_track_pos_x[i-1],2) + pow(left_track_pos_y[i]-left_track_pos_y[i-1],2)   );
            right_track[i] = right_track[i-1]  + sqrt( pow(right_track_pos_x[i]-right_track_pos_x[i-1],2) + pow(right_track_pos_y[i]-right_track_pos_y[i-1],2)   );
        }



        Pose2d ref_pose;
        Pose2d ekf_pose;


     //   localization = new FullLocalization(new Rotation2d(phi[0]+gyro_offset),new Pose2d(x[0],y[0], new Rotation2d(phi[0])) ,m_width);
        localization = new FullLocalization(new Rotation2d(),new Pose2d() ,m_width);
        wpi_localization = new DifferentialDriveOdometry( new Rotation2d(phi[0]+gyro_offset), new Pose2d(x[0],y[0],new Rotation2d(phi[0])));

        localization.resetPosition(new Pose2d(x[0],y[0], new Rotation2d(phi[0])) , new Rotation2d(phi[0]+gyro_offset),time);

        for (int i =1; i<acc.length ; i ++) {
            angle =  new Rotation2d(phi[i]+gyro_offset);
            left = left_track[i];
            right = right_track[i];

            ref_pose = wpi_localization.update(angle, left, right);
            ekf_pose = localization.update(angle, left, right, acc[i] + 2*(random()-0.5),time);


            if ( i> 8) { // ignore first cycles, before KF is stabilized
                assertEquals(ref_pose.getTranslation().getX(), ekf_pose.getTranslation().getX(), 1e-2);
                assertEquals(ref_pose.getTranslation().getY(), ekf_pose.getTranslation().getY(), 1e-2);
//                assertEquals(ref_pose.getRotation().getDegrees(), ekf_pose.getRotation().getDegrees(), 1);
                assertEquals(v[i], localization.filter.model.state_estimate.data[2][0], 0.07);
                assertEquals(omega[i], localization.filter.model.state_estimate.data[4][0], 0.07);
                assertEquals(phi[i],ekf_pose.getRotation().getRadians(), 0.05);
            }
            time += dt;
        }
    }

    @Test
    public void updateAccBias() {
        Rotation2d angle = new Rotation2d(0);

        double left ;
        double right;


        double dt = 2e-2; // 20 msec timestep
        double time = dt;
        double[] acc =   {0.1,0.2,0.3,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,0.8,0.8,0.8,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   , 0  ,0   ,0  }; // m/s^2
        double[] omega = {0  ,0  ,0  ,0  ,  0,0  ,0,0,0,0,0,0,0,0,0,0  ,0  , 0 , 0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.02,0.02}; // rad/s

        double[] v = new double[acc.length];
        double[] phi = new double[acc.length];
        double[] x = new double[acc.length];
        double[] y = new double[acc.length];
        double[] left_track = new double[acc.length];
        double[] right_track = new double[acc.length];
        double[] right_track_pos_x = new double[acc.length];
        double[] right_track_pos_y = new double[acc.length];
        double[] left_track_pos_x = new double[acc.length];
        double[] left_track_pos_y = new double[acc.length];

        v[0] = 0;
        phi[0] = 0;
        x[0] = 0;
        y[0] = 0;
        right_track_pos_x[0] = x[0] + m_width/2*sin(-phi[0]);
        right_track_pos_y[0] = y[0] - m_width/2*cos(-phi[0]);
        left_track_pos_x[0] = x[0] - m_width/2*sin(-phi[0]);
        left_track_pos_y[0] = y[0] + m_width/2*cos(-phi[0]);
        right_track[0]=0;
        left_track[0]=0;


        for (int i=1; i < acc.length; i ++ )
        {
            omega[i] = omega[i]+0.1; // Create constant angular rate
            v[i]=v[i-1]+dt*acc[i-1];
            phi[i]=phi[i-1]+dt*omega[i-1];
            x[i] = x[i-1] + dt*(v[i] + v[i-1])/2*cos((phi[i]+phi[i-1])/2);
            y[i] = y[i-1] + dt*(v[i] + v[i-1])/2*sin((phi[i]+phi[i-1])/2);


            right_track_pos_x[i] = x[i] + m_width/2*sin(-phi[i]);
            right_track_pos_y[i] = y[i] - m_width/2*cos(-phi[i]);
            left_track_pos_x[i] = x[i] - m_width/2*sin(-phi[i]);
            left_track_pos_y[i] = y[i] + m_width/2*cos(-phi[i]);

            left_track[i] =left_track[i-1] +  sqrt( pow(left_track_pos_x[i]-left_track_pos_x[i-1],2) + pow(left_track_pos_y[i]-left_track_pos_y[i-1],2)   );
            right_track[i] = right_track[i-1]  + sqrt( pow(right_track_pos_x[i]-right_track_pos_x[i-1],2) + pow(right_track_pos_y[i]-right_track_pos_y[i-1],2)   );
        }



        Pose2d ref_pose;
        Pose2d ekf_pose;

        for (int i =1; i<acc.length ; i ++) {
            angle = Rotation2d.fromDegrees( toDegrees( phi[i]));
            left = left_track[i];
            right = right_track[i];

            ref_pose = wpi_localization.update(angle, left, right);
            ekf_pose = localization.update(angle, left, right, acc[i] + 0.5*(random()-0.5) + 0.2,time);


            if ( i> 8) { // ignore first cycles, before KF is stabilized
                assertEquals(ref_pose.getTranslation().getX(), ekf_pose.getTranslation().getX(), 1e-2);
                assertEquals(ref_pose.getTranslation().getY(), ekf_pose.getTranslation().getY(), 1e-2);
                assertEquals(ref_pose.getRotation().getDegrees(), ekf_pose.getRotation().getDegrees(), 1);
                assertEquals(v[i], localization.filter.model.state_estimate.data[2][0], 0.07);
                assertEquals(omega[i], localization.filter.model.state_estimate.data[4][0], 0.07);
                assertEquals(phi[i],ekf_pose.getRotation().getRadians(), 0.05);
            }
            time += dt;
        }


    }


    @Test
    public void encoderValid()
    {
        Rotation2d angle = new Rotation2d(20);
        Pose2d pose = new Pose2d(0,0,angle);

        localization.resetPosition(pose,angle,0);
        assertEquals(true,localization.EncoderValid(angle,0,0));
        assertEquals(false,localization.EncoderValid(angle,1,0));
        assertEquals(false,localization.EncoderValid(angle,0.1,0));
    }

    @Test
    public void updateNoEncoder() {
        Rotation2d angle = new Rotation2d(0);

        double left ;
        double right;


        double dt = 2e-2;
        double time = dt;
        double[] acc =   {0.1,0.2,0.3,0.4,0.6,0.8,1,1,1,1,1,1,1,1,1,0.8,0.8,0.8,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   , 0  ,0   ,0  }; // m/s^2
        double[] omega = {0  ,0  ,0  ,0  ,  0,0  ,0,0,0,0,0,0,0,0,0,0  ,0  , 0 , 0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.02,0.02,0.02}; // rad/s

        double[] v = new double[acc.length];
        double[] phi = new double[acc.length];
        double[] x = new double[acc.length];
        double[] y = new double[acc.length];
        double[] left_track = new double[acc.length];
        double[] right_track = new double[acc.length];
        double[] right_track_pos_x = new double[acc.length];
        double[] right_track_pos_y = new double[acc.length];
        double[] left_track_pos_x = new double[acc.length];
        double[] left_track_pos_y = new double[acc.length];

        v[0] = 0;
        phi[0] = 0;
        x[0] = 0;
        y[0] = 0;
        right_track_pos_x[0] = x[0] + m_width/2*sin(-phi[0]);
        right_track_pos_y[0] = y[0] - m_width/2*cos(-phi[0]);
        left_track_pos_x[0] = x[0] - m_width/2*sin(-phi[0]);
        left_track_pos_y[0] = y[0] + m_width/2*cos(-phi[0]);
        right_track[0]=0;
        left_track[0]=0;



        for (int i=1; i < acc.length; i ++ )
        {
            omega[i] = omega[i]+0.1; // Create constant angular rate
            v[i]=v[i-1]+dt*acc[i-1];
            phi[i]=phi[i-1]+dt*omega[i-1];
            x[i] = x[i-1] + dt*(v[i] + v[i-1])/2*cos((phi[i]+phi[i-1])/2);
            y[i] = y[i-1] + dt*(v[i] + v[i-1])/2*sin((phi[i]+phi[i-1])/2);


            right_track_pos_x[i] = x[i] + m_width/2*sin(-phi[i]);
            right_track_pos_y[i] = y[i] - m_width/2*cos(-phi[i]);
            left_track_pos_x[i] = x[i] - m_width/2*sin(-phi[i]);
            left_track_pos_y[i] = y[i] + m_width/2*cos(-phi[i]);

            left_track[i] =left_track[i-1] +  sqrt( pow(left_track_pos_x[i]-left_track_pos_x[i-1],2) + pow(left_track_pos_y[i]-left_track_pos_y[i-1],2)   );
            right_track[i] = right_track[i-1]  + sqrt( pow(right_track_pos_x[i]-right_track_pos_x[i-1],2) + pow(right_track_pos_y[i]-right_track_pos_y[i-1],2)   );
        }



        Pose2d ref_pose;
        Pose2d ekf_pose;

        for (int i =1; i<acc.length ; i ++) {

            if (i>= 15) // Insert wrong encoder value
            {
                left_track[i] += 1;
            }

            angle = Rotation2d.fromDegrees( toDegrees( phi[i]));
            left = left_track[i];
            right = right_track[i];

            ref_pose = wpi_localization.update(angle, left, right);
            ekf_pose = localization.update(angle, left, right, acc[i] + 2*(random()-0.5),time);


            if ( i> 8) { // ignore first cycles, before KF is stabilized
                assertEquals(x[i], ekf_pose.getTranslation().getX(), 1e-2);
                assertEquals(y[i], ekf_pose.getTranslation().getY(), 1e-2);
                assertEquals(v[i], localization.filter.model.state_estimate.data[2][0], 0.07);
                assertEquals(omega[i], localization.filter.model.state_estimate.data[4][0], 0.07);
                assertEquals(phi[i],ekf_pose.getRotation().getRadians(), 0.05);
            }

            if (i>15)
            {
                // WPI localization should be wrong
                assertNotEquals(ref_pose.getTranslation().getX(), ekf_pose.getTranslation().getX(), 1e-2);

            }
            time += dt;
        }
    }

    @Test
    public void TestData() {
        Rotation2d angle = new Rotation2d(0);

        double left ;
        double right;


        double dt = 2e-2;
        double time = dt;



        double[] left_track = {};
        double[] right_track = {};
        double[] acc = {0.009807,0.019613,0.019613,0.000000,0.009807,0.019613,0.000000,0.009807,-0.019613,0.009807,0.009807,0.019613,0.000000,0.000000,0.000000,0.000000,0.009807,0.000000,0.000000,0.000000,0.019613,0.000000,0.019613,0.019613,-0.009807,-0.019613,0.000000,0.000000,-0.009807,0.000000,0.000000,0.009807,0.000000,0.000000,0.009807,0.000000,0.009807,-0.009807,0.000000,0.000000,0.019613,0.019613,-0.009807,0.000000,0.000000,0.009807,0.000000,0.000000,0.019613,0.019613,0.019613,0.000000,0.000000,0.000000,0.000000,0.000000,-0.009807,0.000000,0.000000,0.009807,-0.009807,0.009807,-0.009807,0.000000,-0.009807,0.000000,0.000000,0.009807,0.009807,0.000000,0.000000,-0.009807,0.019613,0.019613,0.000000,0.000000,0.009807,-0.009807,0.000000,0.009807,-0.019613,0.019613,0.000000,0.000000,0.000000,0.000000,0.000000,0.029420,0.000000,0.000000,0.000000,0.000000,0.000000,0.009807,0.000000,0.000000,0.009807,0.029420,0.029420,0.019613,-0.009807,0.009807,0.000000,0.000000,0.000000,-0.009807,0.009807,0.009807,0.000000,-0.009807,0.000000,0.000000,0.000000,0.000000,0.000000,-0.009807,0.000000,0.000000,0.000000,0.019613,-0.098066,-0.127486,0.049033,0.245166,0.686466,0.686466,0.480526,0.931632,0.931632,0.813952,1.863263,1.706357,1.127765,1.088538,0.804145,0.225553,0.666852,0.441299,4.393379,1.372931,1.108151,0.519752,0.637432,2.069203,1.333704,1.421964,0.862985,0.990472,2.157463,1.520031,0.333426,-1.804424,-0.813952,-0.764919,-1.235638,-0.637432,-0.686466,-2.912575,0.519752,1.922103,2.020170,-1.068925,-0.284393,3.216581,2.029977,1.157185,0.362846,-2.471276,-4.981778,-3.246001,-1.108151,-0.049033,-2.922382,-2.363403,-1.608291,-1.882877,-1.157185,-1.117958,-1.274864,-2.137850,3.255808,-0.304006,-1.608291,1.706357,-2.265336,-0.647239,-6.217416,-5.521144,8.041453,4.226666,-0.990472,2.873349,-4.844485,-1.951523,-1.304284,-0.892405,-2.226110,-2.834122,-1.461191,0.196133,2.098623,2.814509,0.902212,-0.804145,-3.324454,1.441578,3.040062,5.766310,-1.529837,-2.706635,-2.079010,3.128321,2.294756,1.088538,2.530116,7.364794,6.599875,2.951802,-1.127765,-1.245445,2.716442,-1.569064,-3.432327,2.314369,1.461191,1.461191,-4.089373,1.608291,4.079566,6.021283,6.050703,-0.176520,-0.402073,0.941438,-0.872792,1.255251,-1.078731,2.304563,-3.510781,-6.550842,-12.150439,-5.540757,-0.225553,0.235360,-0.196133,-3.402908,-4.746419,-3.491167,-1.696550,-3.049868,3.275421,-0.657046,0.715885,0.666852,-2.892962,3.824593,-0.872792,-1.098345,-0.088260,-4.099180,2.628182,-0.088260,-4.834678,-1.402351,1.196411,8.316039,-3.069481,-3.510781,0.617819,1.549451,-0.058840,-11.414941,-3.883433,2.147656,-0.058840,-3.187161,-2.510503,3.432327,6.560649,4.226666,1.765197,-0.500139,-4.305119,-3.981500,-0.411879,0.107873,-7.727640,-0.970858,-3.559814,1.059118,3.785367,-1.637711,-8.531786,-4.265893,-4.756225,-3.167548,-4.207053,-5.560370,-5.991863,1.657324,-1.323898,1.206218,-2.167270,3.844207,3.285228,-4.344346,-7.129435,-3.147935,-1.470998,-0.019613,-1.333704,-6.089930,-5.011198,3.334261,0.029420,-2.510503,1.539644,-1.922103,-2.912575,-5.226944,-3.098902,-0.578592,-1.598484,-3.089095,0.254973,-1.333704,1.863263,-0.813952,-2.392823,0.078453,0.078453,-2.167270,-1.510224,-2.216303,-0.539366,-0.402073,1.676937,-4.177633,-1.382738,0.176520,-2.294756,0.990472,1.225831,1.745584,-5.285784,-1.392544,-0.980665,2.333983,1.284671,1.539644,0.470719,3.736334,-1.343511,1.255251,-5.148491,1.520031,-3.579427,-0.500139,-4.775838,-6.864655,7.296148,3.344068,-5.766310,-3.638267,-8.217973,-3.804980,-4.314926,-5.756504,0.637432,5.207331,2.108430,0.509946,2.186883,2.392823,1.186605,6.217416,7.011754,8.875018,7.256921,2.559536,4.520866,3.393101,4.010920,8.933858,5.089651,4.138406,3.412714,0.343233,-3.059675,-2.118236,-0.117680,0.676659,0.039227,1.667131,-0.588399,0.941438,-1.117958,-0.460913,-0.284393,0.196133,-0.500139,-0.706079,0.304006,0.666852,1.274864,2.687022,-0.088260,-1.363124,-2.618375,-2.088816,-2.353596,-3.903047,-2.961608,0.843372,0.853179,0.519752,-3.177355,-7.286341,3.687300,13.660664,16.867438,16.220200,10.983448,10.963835,12.856518,5.089651,-5.442691,-2.392823,0.039227,3.716720,-4.834678,-5.903603,-2.049590,0.068647,-0.058840,-3.157741,-0.205940,2.785089,1.343511,3.677494,1.029698,-1.902490,-1.049312,-4.040340,-5.315204,-2.069203,-0.529559,0.480526,3.608847,-1.157185,0.882599,0.588399,1.971137,0.107873,0.117680,0.686466,-0.951245,3.295034,4.873905,4.452219,2.324176,-1.343511,-5.295591,-0.853179,0.706079,3.510781,0.156906,-4.795452,0.205940,-0.657046,-1.225831,2.726249,-2.471276,-1.520031,0.764919,3.000835,5.579984,0.490333,1.696550,0.333426,-0.696272,-0.872792,0.627626,-2.932188,1.470998,-3.069481,-2.363403,-2.775282,2.530116,-0.451106,-0.725692,6.344903,-2.383016,0.588399,-0.127486,-0.088260,2.834122,2.451662,6.648908,8.433719,-6.423355,0.627626,4.903325,7.796287,2.049590,-4.275699,5.442691,-2.579149,1.843650,3.363681,-1.667131,-4.412992,2.696829,6.256643,0.794339,-0.725692,5.834957,1.902490,-1.657324,-0.117680,6.325289,-1.333704,4.010920,1.363124,-3.275421,-1.176798,-2.137850,0.480526,1.451384,2.284949,-2.657602,0.735499,6.168383,-1.716164,5.403464,0.215746,0.715885,-4.540479,0.382459,-1.961330,1.961330,2.520309,0.460913,-7.482474,-4.393379,1.166991,2.412436,2.579149,3.854014,-0.490333,-1.539644,-3.589234,-1.216025,-1.922103,7.433441,6.354709,1.157185,-4.971972,-1.245445,-0.382459,1.343511,-0.323619,1.873070,4.432606,2.559536,-4.491446,-5.177911,-0.529559,1.608291,-3.030255,-2.049590,-4.020726,2.147656,3.657880,1.157185,0.666852,-2.128043,-1.186605,-1.814230,-5.560370,-1.971137,-2.432049,0.441299,-0.843372,-5.423077,-1.078731,-3.706914,-2.137850,-2.118236,0.568786,-2.559536,-3.010642,-6.423355,-3.814787,-1.667131,2.981222,2.500696,8.561206,6.060509,3.187161,-1.402351,-3.520587,-0.549172,-1.578871,-2.510503,2.029977,-3.451941,1.088538,1.186605,-0.068647,6.442969,8.571012,3.942273,-5.040618,6.060509,-3.236195,0.470719,1.559257,0.558979,0.509946,-3.461747,5.540757,3.804980,1.892683,-3.608847,8.463139,4.265893,6.952915,4.648352,-2.834122,-2.530116,1.470998,-0.009807,1.176798,-0.392266,-3.520587,1.569064,-6.845042,-0.264780,-0.804145,-5.177911,-1.814230,4.824872,-0.764919,0.529559,-1.980943,-3.432327,4.658159,-0.343233,0.627626,-11.238421,-3.187161,-4.962165,0.480526,5.177911,-1.029698,-6.080123,-1.127765,2.510503,10.434276,10.434276,-5.540757,-2.039783,2.255530,-8.492559,-2.951802,3.491167,-6.511615,2.598762,1.549451,4.354153,-6.658716,-2.539922,-2.804702,-0.921825,-1.490611,-0.009807,-2.785089,-5.285784,-5.864377,-3.010642,2.079010,0.441299,0.696272,-3.216581,-5.344624,-5.982057,-0.872792,3.069481,-0.843372,1.470998,-3.530394,-0.009807,-1.627904,1.784810,-0.460913,3.255808,-1.725970,0.941438,-0.823759,-3.216581,1.274864,2.794895,-0.098066,-3.373488,0.862985,0.774725,0.961052,1.117958,-0.921825,-2.716442,-0.784532,-1.794617,0.941438,0.813952,-2.628182,-2.412436,-3.451941,-2.088816,0.196133,-3.628461,-1.912297,3.912853,0.127486,-1.853457,2.157463,0.539366,-4.442413,3.226388,3.226388,1.451384,4.697385,8.796565,2.412436,-2.157463,-0.411879,-1.765197,-0.156906,-0.049033,0.137293,1.216025,-2.010363,0.441299,0.509946,0.853179,-6.148769,-2.706635,5.893797,-0.117680,2.284949,-1.265058,4.118793,1.843650,-0.156906,-0.951245,1.559257,-4.363959,-0.902212,-1.245445,5.383851,-0.941438,3.530394,4.403186,6.707749,-1.696550,-2.804702,2.098623,5.011198,7.247115,2.549729,-1.000278,4.118793,3.628461,-0.980665,1.520031,3.000835,1.068925,3.648074,-4.403186,1.873070,2.696829,6.305676,1.686744,-2.432049,0.431493,5.491724,3.138128,-1.971137,-1.814230,-0.823759,0.725692,1.441578,-0.519752,0.343233,1.049312,0.608012,0.902212,0.500139,-0.990472,-1.166991,0.009807,0.578592,-0.617819,-0.872792,-0.872792,-0.460913,-0.225553,-0.284393,-0.588399,-0.235360,-0.019613,0.000000,0.000000,-0.009807,-0.147100,0.000000,0.049033,-0.323619,-0.745305,-0.627626,-0.166713,-0.460913,-0.304006,-0.313813,-0.784532,-1.049312,-1.343511,-0.735499,-1.353318,-1.725970,-2.245723,-2.167270,0.264780,-1.461191,-0.343233,-0.215746,-0.647239,-0.509946,-1.157185,1.755390,2.588956,0.666852,1.470998,1.019892,1.206218,0.019613,0.245166,-1.441578,0.696272,-0.392266,-0.676659,-0.931632,-0.147100,-1.098345,-0.068647,0.431493,0.372653,-0.009807,-0.274586,-1.019892,-0.019613,-0.617819,-0.568786,0.117680,0.039227,-1.117958,0.176520,0.274586,-0.058840,-0.274586,-0.833565,1.068925,0.686466,-0.353039,-0.598206,-0.598206,0.431493,1.500417,2.883155,0.735499,1.784810,0.657046,0.029420,-0.294199,-0.706079,0.029420,-1.470998,-0.313813,0.784532,0.951245,0.892405,0.715885,-0.323619,-0.990472,-1.892683,1.598484,0.833565,-1.049312,-1.686744,-0.755112,0.961052,0.647239,-0.588399,-0.313813,1.559257,0.706079,-1.529837,1.147378,0.921825,-1.029698,-0.127486,0.774725,4.462026,1.696550,-1.500417,-3.196968,-2.843928,-1.451384,1.186605,1.019892,2.961608,1.627904,-1.059118,2.539922,7.423634,6.619489,1.382738,-1.019892,-0.666852,-4.942552,-0.088260,0.980665,-1.588677,-0.127486,2.000557,2.304563,3.520587,5.403464,6.541036,1.794617,-5.825150,-4.226666,-4.442413,-4.462026,-2.186883,-3.206774,2.235916,-2.265336,-2.510503,-0.804145,3.520587,2.912575,7.227501,0.657046,0.735499,4.344346,-0.353039,-2.745862,-2.745862,1.402351,-0.431493,4.491446,1.882877,2.196690,-0.470719,2.324176,2.245723,0.970858,1.049312,-0.657046,0.470719,-1.039505,1.765197,-1.137571,-2.902768,-4.422799,-2.853735,0.990472,-3.461747,-2.520309,-2.432049,0.009807,-1.157185,-0.755112,-0.549172,-0.735499,-1.578871,-3.422521,-3.746140,-1.951523,0.009807,2.363403,1.206218,-0.362846,-7.904160,-3.196968,1.245445,-3.285228,3.442134,3.814787,0};
        double[] phi = {};


        Pose2d ref_pose;
        Pose2d ekf_pose;

        for (int i =1; i<acc.length ; i ++) {



            angle = Rotation2d.fromDegrees( toDegrees( phi[i]));
            left = left_track[i];
            right = right_track[i];

            ref_pose = wpi_localization.update(angle, left, right);
            ekf_pose = localization.update(angle, left, right, acc[i] ,time);
/*
            System.out.printf("%f, %f, %f, %f\n ",localization.filter.model.state_estimate.data[2][0],
                    ekf_pose.getTranslation().getX(),ekf_pose.getTranslation().getY(),
                    ekf_pose.getRotation().getRadians());
*/

            time += dt;
        }
        System.out.printf("\n");
    }
}